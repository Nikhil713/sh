(define (domain reconfiguration1)
 (:requirements :typing :negative-preconditions :universal-preconditions :numeric-fluents :conditional-effects)
(:types
    component ;;Represents software components
    instance  ;;Represents deployed/running instances of components
    port      ;;Represents communication interfaces of components
    space     ;;Represents a deployment space or environment where components can be deployed
)

(:predicates

  ; Implicit predicates for the task
  (instance ?i - instance)
  
  ;; Requirement 
  (space-has-component ?s - space ?c - component)
  (type ?i - instance ?c - component)
  (installed ?i - instance)
  (running ?i - instance)
  (port-active-instance ?p - port ?i - instance)
  (bound ?p - port ?i1 ?i2 - instance)
  ; (require-port-satisfied ?p - port ?i - instance ?n - numeric)
  (installed-require ?c - component ?p - port)
  (installed-provide ?c - component ?p - port)
  (running-require ?c - component ?p - port)
  (running-provide ?c - component ?p - port)

  ;; Additional predicates for the task
  (require-port ?c - component ?p - port)
  
  (active ?p - port)
  (needs-update ?i - instance)
  (scale-down-target ?i - instance)
  (scale-up-target ?i - instance)

  (next-instance-id ?i - instance)
  
)

(:functions

    ;; Requirement 
    (instance-number) - number
    (component-instance-number ?c - component) - number
    (component-should-have-instance-number ?c - component)- number
    (component-version ?c - component) - number
    (require-port-number ?c - component ?p - port) - number
    (temp) - number

    ;; Additional functions for the task
    (version ?i - instance) - number
    (latest-version ?c - component) - number
    (instance-version ?i - instance) - number
    (require-port-satisfied ?p - port ?i - instance) - number
)

;; ACTIONS

;; Requirement 
(:action createInstance
:parameters (?s - space ?c - component ?i - instance)
:precondition ()
:effect (and
  (instance ?i)
  (type ?i ?c)
  (assign (instance-version ?i) (component-version ?c))
  (increase (instance-number) 1)
  (increase (component-instance-number ?c) 1)
  (forall (?p - port)
    (when (require-port ?c ?p)
      (assign (require-port-satisfied ?p ?i) 0)
      )
    )
)
)

(:action installInstance
:parameters (?s - space ?c - component ?i - instance)
:precondition (and
  (instance ?i)
  (type ?i ?c)
  (space-has-component ?s ?c)
  (not (installed ?i))
)
:effect (and
  (installed ?i)
  (forall (?p - port)
    (when (installed-provide ?c ?p)
      (port-active-instance ?p ?i)
    )
  )
)
)

(:action runInstance
:parameters (?s - space ?c - component ?i - instance)
:precondition (and
  (instance ?i)
  (type ?i ?c)
  (space-has-component ?s ?c)
  (installed ?i)
  (not (running ?i))
)
:effect (and
  (running ?i)                ; instance is now running

  ; deactivate ports provided in installed state
  (forall (?p - port)
    (when (installed-provide ?c ?p)
      (not (port-active-instance ?p ?i))
    )
  )

  ; activate ports provided in running state
  (forall (?p - port)
    (when (running-provide ?c ?p)
      (port-active-instance ?p ?i)
    )
  )
)
)

(:action stopInstance
:parameters (?s - space ?c - component ?i - instance)
:precondition (and
  (instance ?i)
  (type ?i ?c)
  (space-has-component ?s ?c)
  (running ?i)
)
:effect (and
  (not (running ?i)) ; mark instance as no longer running

  ; deactivate ports provided in running state
  (forall (?p - port)
    (when (running-provide ?c ?p)
      (not (port-active-instance ?p ?i))
    )
  )

  ; activate ports provided in installed state (back to installed state)
  (forall (?p - port)
    (when (installed-provide ?c ?p)
      (port-active-instance ?p ?i)
    )
  )
)
)

(:action updateInstance
:parameters (?s - space ?c - component ?i - instance)
:precondition (and
  (instance ?i)
  (type ?i ?c)
  (space-has-component ?s ?c)
  (installed ?i)
  (needs-update ?i)
)
:effect (and
  (not (needs-update ?i))
  (assign (instance-version ?i) (component-version ?c))
)
)

(:action terminateInstance
:parameters (?i - instance ?c - component)
:precondition (and
  (instance ?i)
  (type ?i ?c)
  (installed ?i)
)
:effect (and
  (not (installed ?i))
  (not (running ?i))
  ;; Unbind all ports connected to this instance
  (forall (?p - port ?i2 - instance)
    (when (bound ?p ?i ?i2)
      (not (bound ?p ?i ?i2))
    )
  )
  (forall (?p - port ?i2 - instance)
    (when (bound ?p ?i2 ?i)
      (not (bound ?p ?i2 ?i))
    )
  )
  (forall (?p - port)
  (when (port-active-instance ?p ?i)
    (not (port-active-instance ?p ?i))
  )
  )
)
)

(:action delete-instance
  :parameters (?i - instance ?c - component ?s - space)
  :precondition (and
    (type ?i ?c)
    (space-has-component ?s ?c)
    (not (installed ?i))
    (not (running ?i))
    (not (needs-update ?i))
    (not (scale-down-target ?i))
    (not (scale-up-target ?i))
  )
  :effect (and
    (not (instance ?i))
    (not (type ?i ?c))
  )
)

(:action bind
  :parameters (?s - space ?p - port ?i1 ?i2 - instance ?c1 ?c2 - component)
  :precondition (and
    (instance ?i1)
    (instance ?i2)
    (type ?i1 ?c1)
    (type ?i2 ?c2)
    (space-has-component ?s ?c1)
    (space-has-component ?s ?c2)
    (installed ?i1)
    (installed ?i2)
    (active ?p)
    (not (bound ?p ?i1 ?i2))
  )
  :effect (and
    (bound ?p ?i1 ?i2)
    (port-active-instance ?p ?i1)
    (port-active-instance ?p ?i2)
  )
)

(:action unbind
  :parameters (?s - space ?p - port ?i1 ?i2 - instance ?c1 ?c2 - component)
  :precondition (and
    (bound ?p ?i1 ?i2)
    (instance ?i1)
    (instance ?i2)
    (type ?i1 ?c1)
    (type ?i2 ?c2)
    (space-has-component ?s ?c1)
    (space-has-component ?s ?c2)
  )
  :effect (and
    (not (bound ?p ?i1 ?i2))
    (not (port-active-instance ?p ?i1))
    (not (port-active-instance ?p ?i2))
  )
)


(:action bk-increase-temp
  :parameters ()
  :precondition ()
  :effect (and (increase (temp) 1))
)


(:action bk-decrease-temp
  :parameters ()
  :precondition ()
  :effect (and (decrease (temp) 1))
)

  ; (:action markForUpdate
  ;    :parameters (?i - instance)
  ;    :precondition (and (installed ?i) (not (needs-update ?i)))
  ;    :effect (needs-update ?i)
  ; )

(:action update
  :parameters (?i - instance ?v - number)
  :precondition (and (installed ?i) (needs-update ?i))
  :effect (and (not (needs-update ?i)) (assign (instance-version ?i) ?v))
)

(:action startInstance
  :parameters (?i - instance)
  :precondition (and (installed ?i) (not (running ?i)))
  :effect (running ?i)
)
;; TASKS

(:task installConfiguration
  :parameters (?c - component)
  (:method there-is-free-component-instance
    :precondition (and (instance ?i) (type ?i ?c) (not (installed ?i)) (not (running ?i)))
    :tasks (sequence
       (installInstance ?i))
  )
  (:method no-free-instance
    :precondition ()
    :tasks (sequence
       (createInstance ?s ?c ?i)
       (installConfiguration ?c))
  )
)

(:task installInstance
  :parameters (?i - instance)
  (:method component-instance-is-not-installed
    :precondition (not (installed ?i))
    :tasks (sequence
       (activateInstance ?i))
  )
  (:method component-instance-is-already-installed-with-at-least-one-provide-port-bound
    :precondition (and (type ?i ?c) (installed ?i) (installed-provide ?c ?p) (bound ?p ?i1 ?i))
    :tasks (sequence
       (installConfiguration ?c))
  )
  )
)


(:task activateInstance
  :parameters (?i - instance)
  (:method port-is-active-and-bound
    :precondition (and (type ?i ?c) 
      (forall (?p - port) (and (installed-require ?c ?p)
                               (active ?p) (bound ?p ?i ?i1))))
    :tasks (sequence
       (startInstance ?i))
  )
  (:method port-is-active-and-unbound
    :precondition (and (installed-require ?c ?p) (active ?p)
                       (type ?i ?c) (not (installed ?i)) 
                       (type ?i1 ?c1) (not (bound ?p ?i ?i1))
                       (or (installed-provide ?c1 ?p) (running-provide ?c1 ?p))
                       (or (installed ?i1) (running ?i1)))
    :tasks (sequence
       (bind ?p ?i ?i1)
       (activateInstance ?i))
  )
  (:method require-port-inactive
    :precondition (and (type ?i ?c) (installed-require ?c ?p) (not (active ?p)))
    :tasks (sequence
       (activatePort ?c ?p)
       (activateInstance ?i))
  )
  (:method no-require-ports
    :precondition ()
    :tasks (sequence
       (startInstance ?i))
  )
)


(:task activatePort
  :parameters (?c - component ?p - port)
  (:method port-is-inactive-and-there-is-provide-port-in-active-state-of-some-component
    :precondition (and (installed-provide ?c1 ?p) (not (= ?c ?c1)))
    :tasks (sequence
       (installConfiguration ?c1))
  )
  (:method port-is-inactive-and-there-is-provide-port-in-running-state-of-some-component
    :precondition (and (running-provide ?c1 ?p))
    :tasks (sequence
       (runConfiguration ?c1))
  )
)


(:task deactivateProvidePorts
    :parameters (?c - component ?i - instance)
    (:method there-is-bound-port-but-needed-for-running
      :precondition (and (type ?i ?c) (installed-provide ?c ?p) (bound ?p ?i1 ?i) (installed ?i) (running-provide ?c ?p))
      :tasks (sequence
             (runInstance ?i)
             (unbindPorts ?i))
    )
    (:method installed-provide-port-is-free
      :precondition (and (installed-provide ?c ?p) (type ?i ?c) (not (bound ?p ?i1 ?i)) (installed ?i))
      :tasks (sequence
             (runInstance ?i)
             (unbindPorts ?i))
    )
    (:method installed-provide-port-is-bound
      :precondition (and (installed-provide ?c ?p) (type ?i ?c) (bound ?p ?i1 ?i) (installed ?i))
      :tasks (sequence
             (runConfiguration ?c))
    )
    (:method free-to-run
      :precondition ()
      :tasks (sequence
             (runInstance ?i)
             (unbindPorts ?i))
    )
  )

  (:task unbindPorts
      :parameters (?i - instance)
      (:method there-is-bound-port
         :precondition (and (type ?i ?c) (installed-require ?c ?p) (bound ?p ?i ?i1))
         :tasks (sequence
                (unbind ?p ?i ?i1)
                (unbindPorts ?i))
      )
  )

   (:task runConfiguration
       :parameters (?c - component)
       (:method there-is-free-component-instance
         :precondition (and (instance ?i) (type ?i ?c) (not (installed ?i)) (not (running ?i)))
         :tasks (sequence
                (installInstance ?i)
                (runInstanceTask ?i))
       )
       (:method no-free-instance
         :precondition ()
         :tasks (sequence
                (createInstance ?s ?c ?i)
                (runConfiguration ?c))
       )
   )

(:task runInstanceTask
    :parameters (?i - instance)
    (:method port-is-active-and-bound
        :precondition (and (type ?i ?c)
                           (forall (?p - port)
                               (and (running-require ?c ?p)
                                    (active ?p)
                                    (bound ?p ?i ?i1))))
        :tasks (sequence
                (deactivateProvidePorts ?c ?i))
    )
    (:method port-is-active-and-unbound
        :precondition (and (type ?i ?c)
                           (running-require ?c ?p)
                           (active ?p)
                           (installed ?i)
                           (type ?i1 ?c1)
                           (not (bound ?p ?i ?i1))
                           (or (and (installed-provide ?c1 ?p) (installed ?i1))
                               (and (running-provide ?c1 ?p) (running ?i1))))
        :tasks (sequence
                (bind ?p ?i ?i1)
                (runInstanceTask ?i))
    )
    (:method port-is-inactive
        :precondition (and (type ?i ?c)
                           (running-require ?c ?p)
                           (not (active ?p)))
        :tasks (sequence
                (activatePort ?c ?p)
                (runInstanceTask ?i))
    )
    (:method there-are-no-require-ports
        :precondition (type ?i ?c)
        :tasks (sequence
                (deactivateProvidePorts ?c ?i))
    )
)


(:task scaleUpTask
    :parameters (?c - component)
    (:method scale-up-by-creating-new-instance
        :precondition (scale-up-target ?i)
        :tasks (sequence
               (createInstance ?s ?c ?i)
               (installInstance ?i)
               (runInstanceTask ?i))
    )
)


(:task scaleDownTask
    :parameters (?i - instance)
    (:method stop-and-remove-instance
        :precondition (scale-down-target ?i)
        :tasks (sequence
            (stopInstance ?i)
            (unbindPorts ?i)
            (terminateInstance ?i)
        )
    )
)

(:task updateVersionTask
    :parameters (?i - instance ?v - number)
    (:method perform-version-update
        :precondition (needs-update ?i)
        :tasks (sequence
            (stopInstance ?i)
            (update ?i ?v)
            (startInstance ?i)
            (runInstanceTask ?i)
        )
    )
)

(:task scaleUp
  :parameters (?s - space ?c - component ?i - instance)
  (:method need-to-scale
    :precondition (< (component-instance-number ?c) (component-should-have-instance-number ?c))
    :tasks (sequence
      (createInstance ?s ?c ?i)
      (installConfiguration ?i) ; assuming install per instance
      (runInstance ?i)           ; example run/start task
      (scaleUp ?s ?c (next-instance-id ?c)) ; recursive call with next instance id
    )
  )
)


)